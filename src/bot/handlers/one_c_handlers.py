# bot/handlers/one_c_handlers.py

import logging
from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from bot.handlers.models.dynamic_bot_message import DynamicBotMessage
from bot.handlers.models.fork_maker import BaseForkMaker
from bot.handlers.tickets import add_step
from bot.states import OneCStates, TicketStates, FinalStates
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, Message
from bot.keyboards import base_buttons
from bot.handlers.utils import default_handle, flash_message


logger = logging.getLogger(__name__)
router = Router()
fork_maker = BaseForkMaker(base_buttons=base_buttons)
bot_message = DynamicBotMessage()


@router.callback_query(F.data == "inc_1c",
        StateFilter(TicketStates.create_ticket, OneCStates.inc_1c))
async def select_category(callback: CallbackQuery, state: FSMContext):
    logger.debug("Call select_category")

    prompt = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É"
    keyboard = fork_maker.build_keyboard()
    await state.set_state(OneCStates.inc_1c)
    await default_handle(callback, state, prompt, keyboard)


@router.callback_query(StateFilter(OneCStates.inc_1c))
async def callback_dispatcher(callback: CallbackQuery, state: FSMContext):
    logger.debug("Call callback_dispatcher")
    await fork_maker(callback, state)


@fork_maker.register_callback(name="lic", text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π")
async def lic_handler(callback: CallbackQuery, state: FSMContext):
    logger.debug("Call lic_handler")
    await bot_message.add_field(state, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π")

    prompt = await bot_message.render(state,
                                      "üí¨ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏"
                                      "(–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)"
                                      )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    next_state = FinalStates.title

    await default_handle(callback, state, prompt, keyboard, next_state)


@fork_maker.register_callback(name="obmen", text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–º–µ–Ω–æ–º")
async def obmen_handler(callback: CallbackQuery, state: FSMContext):
    logger.debug("Call obmen_handler")
    await bot_message.add_field(state, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–º–µ–Ω–æ–º")

    prompt = await bot_message.render(state,
                                      "üí¨ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏"
                                      "(–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)"
                                      )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    next_state = FinalStates.title

    await default_handle(callback, state, prompt, keyboard, next_state)


@fork_maker.register_callback(name="new", text="nwe —Å –æ–±–º–µ–Ω–æ–º")
async def obmen_handler_(callback: CallbackQuery, state: FSMContext):
    logger.debug("Call obmen_handler_")
    await bot_message.add_field(state, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", " nwe —Å –æ–±–º–µ–Ω–æ–º")

    prompt = await bot_message.render(state,
                                      "üí¨ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏"
                                      "(–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)"
                                      )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    next_state = FinalStates.title

    await default_handle(callback, state, prompt, keyboard, next_state)


@router.message(StateFilter(FinalStates.title))
async def process_title(message: Message , state: FSMContext):
    logger.debug(f"Call process_title")

    text = message.text.strip()
    await message.delete()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(text) < 10:
        await flash_message(message,
                            f"‚ùó–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{text} - —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π\n"
                            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 10 —Å–∏–º–≤–æ–ª–æ–≤\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", delay=5)
        # await bot_message.update_message(message, state, "‚ùó–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        return

    #¬†–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ –≤ –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
    await state.update_data(title=text)
    await bot_message.add_field(state, "–ó–∞–≥–æ–ª–æ–≤–æ–∫", text)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    prompt = await bot_message.render(state, "üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    await add_step(state, prompt=prompt, keyboard=keyboard)
    await state.set_state(FinalStates.title)


@router.message(StateFilter(FinalStates.description))
async def process_description(message: Message , state: FSMContext):
    logger.debug(f"Call process_description")

    text = message.text.strip()
    await message.delete()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if len(text) < 10:
        await flash_message(message,
                            f"‚ùó–û–ø–∏—Å–∞–Ω–∏–µ:\n{text} - —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ\n"
                            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 10 —Å–∏–º–≤–æ–ª–æ–≤\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", delay=5)
        # await bot_message.update_message(message, state, "‚ùó–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        return

    #¬†–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ –≤ –æ–±—â–∏–π —à–∞–±–ª–æ–Ω
    await state.update_data(description=text)
    await bot_message.add_field(state, "–û–ø–∏—Å–∞–Ω–∏–µ", text)

    # await bot_message.update_message(message, state)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    prompt = await bot_message.render(state, "‚úÖ–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    await add_step(state, prompt=prompt, keyboard=keyboard)
    await state.set_state(FinalStates.confirm)


@router.callback_query(StateFilter(FinalStates.confirm))
async def process_confirm(message: Message , state: FSMContext):
    prompt = await bot_message.render(state, " –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[base_buttons])
    await add_step(state, prompt=prompt, keyboard=keyboard)
    await state.set_state(FinalStates.confirm)
